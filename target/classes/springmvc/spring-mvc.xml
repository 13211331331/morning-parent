<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
                        
    <description>Spring MVC Configuration</description>
                        
    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required 
		    @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注,注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解。    -->
	<context:annotation-config />
	                    
	<!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service（通过spring处理） -->
	<!-- 让Bean定义注解工作起来,也就是上述传统声明方式。 它的base-package属性指定了需要扫描的类包，类包及其递归子包中所有的类都会被处理。 -->
	<context:component-scan base-package="com.morning.controller" />
	
	<!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping 
		annotation-driven HandlerMapping -->
	
	<!-- 添加注解驱动 ;扩充了注解驱动,可以将请求参数绑定到控制器参数 -->
	<mvc:annotation-driven enable-matrix-variables="true" />
	
	<!--
	对静态资源文件的访问  方案二 （二选一）配置静态资源，直接映射到对应的文件夹，DispatcherServlet 不处理
	<mvc:resources mapping="/static/**" location="/WEB-INF/static/" />
	<mvc:resources mapping="/CSS/**" location="/CSS/" />
	<mvc:resources mapping="/images/**" location="/images/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	 -->
	 
	<!-- 对静态资源文件的访问  方案一 （二选一） 处理静态资源问题--> 
	<mvc:default-servlet-handler/>
	
	<!-- 拦截器的配置 -->
	<mvc:interceptors>
		<!-- 前台用户登录拦截器配置 -->
		<mvc:interceptor> 
			<mvc:mapping path="/buy"/>
		    <mvc:mapping path="/buy/*"/>
		    <mvc:mapping path="/user/*"/>
            <mvc:mapping path="/user/**/*"/>
             <mvc:exclude-mapping path="/user/userLogin"/>
             <mvc:exclude-mapping path="/user/userSignin"/>
             <mvc:exclude-mapping path="/user/userGetPsw"/>
             <mvc:exclude-mapping path="/user/creatUser"/>
             <mvc:exclude-mapping path="/user/updatePsw"/>
		    <!-- 如果不定义 mvc:mapping path 将拦截所有的URL请求 -->
		    <bean class="com.morning.common.intercepter.IntercepterWebLogin"></bean>
	    </mvc:interceptor>
	    <!-- 后台管理员登录和权限拦截器配置
		<mvc:interceptor>
		 	<mvc:mapping path="/system/*"/>
		 	<mvc:mapping path="/system/**/*"/>
	 		<mvc:exclude-mapping path="/system/login"/>
		    <bean class="com.morning.common.intercepter.IntercepterAdmin">
		    </bean>
		</mvc:interceptor> -->
		<!-- 前台网站配置拦截器配置-->
		<mvc:interceptor>
		    <mvc:mapping path="/**/*"/>
		    <mvc:mapping path="/"/>
		    <mvc:exclude-mapping path="/static/**/*"/>
		    <mvc:exclude-mapping path="/*/ajax/**"/>
		    <mvc:exclude-mapping path="/ajax/**"/>
		    <mvc:exclude-mapping path="/system"/>
		    <mvc:exclude-mapping path="/system/*"/>
   		    <mvc:exclude-mapping path="/system/**/*"/>
		    <bean class="com.morning.common.intercepter.LimitIntercepterForWebsite">
		    </bean>
		</mvc:interceptor> 
	</mvc:interceptors>
	
	<!-- 视图名称解析器：定义跳转的文件的前后缀 ，视图模式配置 ：配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="utf-8" />  
        <!-- 文件大小最大值 -->
        <property name="maxUploadSize" value="10485760000" />  
        <!-- 内存中的最大值 -->
        <property name="maxInMemorySize" value="40960" />  
    </bean> 
    
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<!-- AOP式方法级权限检查  -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">common/403</prop>
				<prop key="java.lang.Throwable">common/500</prop>
			</props>
			</property>
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->
	
</beans>