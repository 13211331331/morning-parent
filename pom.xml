<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
  http://maven.apache.org/maven-v4_0_0.xsd 
  http://stackoverflow.com/questions/14333709/spring-mvc-3-2-and-json-objectmapper-issue">
  
  
  <!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。-->  
  <modelVersion>4.0.0</modelVersion>   <!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。-->      
  <groupId>com.morning</groupId>       <!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app-->    
  <artifactId>morning</artifactId>     <!--被继承的父项目的构件标识符-->  
  <packaging>war</packaging>           <!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型-->    
  <version>0.0.1-SNAPSHOT</version>    <!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号-->    
  <name>morning Maven Webapp</name>    <!--项目的名称, Maven产生的文档用-->    
  <url>http://maven.apache.org</url>   <!--项目主页的URL, Maven产生的文档用-->

	<!-- 主要依赖库的版本定义：描述了这个项目构建环境中的前提条件 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 定义资源文件的编码格式 -->
		
		<!-- main version setting -->
		<spring.version>4.2.5.RELEASE</spring.version>
		<sitemesh.version>3.0.1</sitemesh.version>
		<mybatis.version>3.2.6</mybatis.version>
		<mybatis-spring.version>1.3.0</mybatis-spring.version>
		<mysql.driver.version>6.0.5</mysql.driver.version>
		<druid.version>1.0.26</druid.version>
		<shiro.version>1.3.2</shiro.version>
		<ehcache.version>3.1.3</ehcache.version>
		
		<!-- tools version setting -->
		<quartz.version>2.2.3</quartz.version>
		<jackson.version>2.8.4</jackson.version>
		<fastjson.version>1.2.20</fastjson.version>
        <log4j2.version>2.7</log4j2.version>
     	<slf4j.version>1.7.21</slf4j.version>
     	<commons-io.version>2.4</commons-io.version>
		<commons-fileupload.version>1.3.1</commons-fileupload.version>
		
		<junit.version>4.12</junit.version>
		<jdk.version>1.7</jdk.version>

	</properties>

	<!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。 -->
	<dependencies>
	
		<!-- spring核心包  begin-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId><!-- 包含Spring框架基本的核心工具类 -->
			<version>${spring.version}</version>
		</dependency>
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-beans</artifactId><!-- springIoC（依赖注入）的基础实现 -->
	        <version>${spring.version}</version>
	    </dependency>
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-context</artifactId><!-- spring 提供在基础 IoC 功能上的扩展服务 -->
	        <version>${spring.version}</version>
	    </dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId><!-- 封装了spring对于事物的控制  -->
			<version>${spring.version}</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId><!-- 包含对Spring对JDBC数据访问进行封装的所有类  -->
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId><!-- spring面向切面编程，提供AOP（面向切面编程） -->
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- spring核心包  end-->
		
		<!-- WEB begin -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId><!-- 包含Web应用开发时，用到Spring框架时所需的核心类，包括自动载入 WebApplicationContext 特性的类、Struts与JSF集成类、文件上传的支持类、Filter类和大量工具辅助类 -->
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId><!-- Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架 -->
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>	
		<dependency>
		    <groupId>org.sitemesh</groupId>
		    <artifactId>sitemesh</artifactId><!-- 网页布局和修饰的框架包 -->	
		    <version>${sitemesh.version}</version>
		</dependency>
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId><!-- j2ee web spec -->
		    <version>4.0.0-b01</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId><!-- JSTL标签类 -->
			<version>1.2</version>
		</dependency>
		<!-- WEB end -->

		<!-- mybatis核心包  -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		
		<!-- mybatis/spring包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis-spring.version}</version>
		</dependency>
		
		<!-- 导入Mysql数据库链接jar包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.driver.version}</version>
		</dependency>
		
		<!-- connection pool:数据库连接池,用来在spingMVC-mybatis.xml中配置数据库  -->
		<dependency>
		     <groupId>com.alibaba</groupId>
		     <artifactId>druid</artifactId>
		     <version>${druid.version}</version>
		</dependency>
		
		<!-- 安全框架SECURITY:shiro begin -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-cas</artifactId>
			<version>${shiro.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-ehcache</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<!-- 安全框架SECURITY:shiro end -->
		
		<!-- ehcache:缓存框架 begin -->
	    <dependency>
	      <groupId>org.ehcache</groupId>
	      <artifactId>ehcache</artifactId>
	      <version>${ehcache.version}</version>
	    </dependency>
		<!-- ehcache:缓存框架 end -->
		
		<!-- spring 定时:Quartz 时间配置详解 -->
		<dependency>
		    <groupId>org.quartz-scheduler</groupId>
		    <artifactId>quartz</artifactId>
		    <version>${quartz.version}</version>
		</dependency>
		
		<!-- 验证码工具 -->
		<dependency>
		    <groupId>com.github.penggle</groupId>
		    <artifactId>kaptcha</artifactId>
		    <version>2.3.2</version>
		</dependency>
		
		<!-- jackson json:高性能的JSON处理  begin -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.module</groupId>
			<artifactId>jackson-module-jaxb-annotations</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		<!-- jackson json end -->
		
		<!-- 格式化对象，方便输出日志 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>
		
		<!-- 获取User Agent用户代理:解析客户端操作系统、浏览器等 -->
		<dependency>
		    <groupId>eu.bitwalker</groupId>
		    <artifactId>UserAgentUtils</artifactId>
		    <version>1.20</version>
		</dependency>
	
		<!-- lombok插件 -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.16.10</version>
		</dependency>
		
        <!-- log4j2 begin -->
         <!--核心log4j2jar包-->  
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!--用于与slf4j保持桥接--> 
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j2.version}</version>
        </dependency>
        <!--  -->
        <dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!-- common-logging 实际调用slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
        <!-- log4j2 end -->
        
        <!-- 上传组件包 -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>${commons-fileupload.version}</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>${commons-io.version}</version>
		</dependency>
		
		<!-- TEST begin -->
		<dependency>
			<groupId>junit</groupId>         <!--依赖的group ID -->
			<artifactId>junit</artifactId>   <!--依赖的artifact ID -->
			<version>${junit.version}</version> 	<!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->
			<scope>test</scope>			   <!-- 依赖项的适用范围：test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。 -->
		</dependency>
		<!-- TEST end -->

		<!-- 加密工具 -->
		<dependency>
		    <groupId>org.bouncycastle</groupId>
		    <artifactId>bcprov-jdk15on</artifactId>
		    <version>1.55</version>
		</dependency>
	    <dependency>
		    <groupId>commons-codec</groupId>
		    <artifactId>commons-codec</artifactId>
		    <version>1.10</version>
		</dependency>
 
		<!-- mail -->
		<dependency>
		    <groupId>javax.mail</groupId>
		    <artifactId>mail</artifactId>
		    <version>1.5.0-b01</version>
		</dependency>
		<dependency>
		    <groupId>javax.activation</groupId>
		    <artifactId>activation</artifactId>
		    <version>1.1.1</version>
		</dependency>
		<!-- 使用Velocity 模板引擎快速生成代码 -->
		<dependency>
		    <groupId>org.apache.velocity</groupId>
		    <artifactId>velocity</artifactId>
		    <version>1.7</version>
		</dependency>
	
	   	<!-- 读取资源文件(例properties)  -->
	    <dependency>
	        <groupId>commons-configuration</groupId>
	        <artifactId>commons-configuration</artifactId>
	        <version>1.9</version>
	    </dependency>
	    <!-- commons-configuration 自动加载的是2.1的版本，编译时会报错，所以再加上这个 -->  
	    <dependency>  
		    <groupId>commons-lang</groupId>  
		    <artifactId>commons-lang</artifactId>  
		    <version>2.6</version>  
		</dependency> 
	
	    <!-- 导入java ee jar 包*（不导入index.jsp报错） -->  
	    <dependency>  
	       <groupId>javax</groupId>  
	       <artifactId>javaee-api</artifactId>  
	       <version>7.0</version>  
	    </dependency>

	
  </dependencies>
 
  <!--构建项目需要的信息-->  
  <build>
    <finalName>morning</finalName>    <!--产生的构件的文件名，默认值是${artifactId}-${version}。-->
        <plugins>  
        	<!-- maven-compiler-plugin: 编译插件 -->
            <plugin>  
                <groupId>org.apache.maven.plugins</groupId>  
                <artifactId>maven-compiler-plugin</artifactId>  
                <version>3.1</version>
                <configuration>  
                    <source>1.8</source>  <!-- 源代码使用的开发版本 -->
                    <target>1.8</target>  <!-- 需要生成的目标class文件的编译版本 -->
                    <!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
                    <encoding>UTF-8</encoding> 
                </configuration>  
            </plugin> 
            
            <!-- maven-assembly-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin> 
        </plugins>    
  </build>
</project>
